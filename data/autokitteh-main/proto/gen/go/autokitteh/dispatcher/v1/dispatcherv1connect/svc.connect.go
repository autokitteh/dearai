// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: autokitteh/dispatcher/v1/svc.proto

package dispatcherv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.autokitteh.dev/autokitteh/proto/gen/go/autokitteh/dispatcher/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// DispatcherServiceName is the fully-qualified name of the DispatcherService service.
	DispatcherServiceName = "autokitteh.dispatcher.v1.DispatcherService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DispatcherServiceDispatchProcedure is the fully-qualified name of the DispatcherService's
	// Dispatch RPC.
	DispatcherServiceDispatchProcedure = "/autokitteh.dispatcher.v1.DispatcherService/Dispatch"
	// DispatcherServiceRedispatchProcedure is the fully-qualified name of the DispatcherService's
	// Redispatch RPC.
	DispatcherServiceRedispatchProcedure = "/autokitteh.dispatcher.v1.DispatcherService/Redispatch"
)

// DispatcherServiceClient is a client for the autokitteh.dispatcher.v1.DispatcherService service.
type DispatcherServiceClient interface {
	Dispatch(context.Context, *connect.Request[v1.DispatchRequest]) (*connect.Response[v1.DispatchResponse], error)
	// Does not creates the event, just resends an existing one.
	// This method also duplicates the event, and generates a new
	// event ID for it. The new event ID is returned in the response.
	Redispatch(context.Context, *connect.Request[v1.RedispatchRequest]) (*connect.Response[v1.RedispatchResponse], error)
}

// NewDispatcherServiceClient constructs a client for the autokitteh.dispatcher.v1.DispatcherService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDispatcherServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DispatcherServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &dispatcherServiceClient{
		dispatch: connect.NewClient[v1.DispatchRequest, v1.DispatchResponse](
			httpClient,
			baseURL+DispatcherServiceDispatchProcedure,
			opts...,
		),
		redispatch: connect.NewClient[v1.RedispatchRequest, v1.RedispatchResponse](
			httpClient,
			baseURL+DispatcherServiceRedispatchProcedure,
			opts...,
		),
	}
}

// dispatcherServiceClient implements DispatcherServiceClient.
type dispatcherServiceClient struct {
	dispatch   *connect.Client[v1.DispatchRequest, v1.DispatchResponse]
	redispatch *connect.Client[v1.RedispatchRequest, v1.RedispatchResponse]
}

// Dispatch calls autokitteh.dispatcher.v1.DispatcherService.Dispatch.
func (c *dispatcherServiceClient) Dispatch(ctx context.Context, req *connect.Request[v1.DispatchRequest]) (*connect.Response[v1.DispatchResponse], error) {
	return c.dispatch.CallUnary(ctx, req)
}

// Redispatch calls autokitteh.dispatcher.v1.DispatcherService.Redispatch.
func (c *dispatcherServiceClient) Redispatch(ctx context.Context, req *connect.Request[v1.RedispatchRequest]) (*connect.Response[v1.RedispatchResponse], error) {
	return c.redispatch.CallUnary(ctx, req)
}

// DispatcherServiceHandler is an implementation of the autokitteh.dispatcher.v1.DispatcherService
// service.
type DispatcherServiceHandler interface {
	Dispatch(context.Context, *connect.Request[v1.DispatchRequest]) (*connect.Response[v1.DispatchResponse], error)
	// Does not creates the event, just resends an existing one.
	// This method also duplicates the event, and generates a new
	// event ID for it. The new event ID is returned in the response.
	Redispatch(context.Context, *connect.Request[v1.RedispatchRequest]) (*connect.Response[v1.RedispatchResponse], error)
}

// NewDispatcherServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDispatcherServiceHandler(svc DispatcherServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dispatcherServiceDispatchHandler := connect.NewUnaryHandler(
		DispatcherServiceDispatchProcedure,
		svc.Dispatch,
		opts...,
	)
	dispatcherServiceRedispatchHandler := connect.NewUnaryHandler(
		DispatcherServiceRedispatchProcedure,
		svc.Redispatch,
		opts...,
	)
	return "/autokitteh.dispatcher.v1.DispatcherService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DispatcherServiceDispatchProcedure:
			dispatcherServiceDispatchHandler.ServeHTTP(w, r)
		case DispatcherServiceRedispatchProcedure:
			dispatcherServiceRedispatchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDispatcherServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDispatcherServiceHandler struct{}

func (UnimplementedDispatcherServiceHandler) Dispatch(context.Context, *connect.Request[v1.DispatchRequest]) (*connect.Response[v1.DispatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.dispatcher.v1.DispatcherService.Dispatch is not implemented"))
}

func (UnimplementedDispatcherServiceHandler) Redispatch(context.Context, *connect.Request[v1.RedispatchRequest]) (*connect.Response[v1.RedispatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.dispatcher.v1.DispatcherService.Redispatch is not implemented"))
}
