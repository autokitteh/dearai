// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: autokitteh/integration_provider/v1/svc.proto

package integration_providerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.autokitteh.dev/autokitteh/proto/gen/go/autokitteh/integration_provider/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// IntegrationProviderServiceName is the fully-qualified name of the IntegrationProviderService
	// service.
	IntegrationProviderServiceName = "autokitteh.integration_provider.v1.IntegrationProviderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntegrationProviderServiceGetProcedure is the fully-qualified name of the
	// IntegrationProviderService's Get RPC.
	IntegrationProviderServiceGetProcedure = "/autokitteh.integration_provider.v1.IntegrationProviderService/Get"
	// IntegrationProviderServiceListProcedure is the fully-qualified name of the
	// IntegrationProviderService's List RPC.
	IntegrationProviderServiceListProcedure = "/autokitteh.integration_provider.v1.IntegrationProviderService/List"
	// IntegrationProviderServiceCallProcedure is the fully-qualified name of the
	// IntegrationProviderService's Call RPC.
	IntegrationProviderServiceCallProcedure = "/autokitteh.integration_provider.v1.IntegrationProviderService/Call"
)

// IntegrationProviderServiceClient is a client for the
// autokitteh.integration_provider.v1.IntegrationProviderService service.
type IntegrationProviderServiceClient interface {
	// Static declaration(s) of functions and values exposed to autokitteh.
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	// Relay an API method call from the autokitteh runtime engine,
	// via the autokitteh connection manager, to the integration
	// provider, and then relay back the API's response.
	Call(context.Context, *connect.Request[v1.CallRequest]) (*connect.Response[v1.CallResponse], error)
}

// NewIntegrationProviderServiceClient constructs a client for the
// autokitteh.integration_provider.v1.IntegrationProviderService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntegrationProviderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IntegrationProviderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &integrationProviderServiceClient{
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+IntegrationProviderServiceGetProcedure,
			opts...,
		),
		list: connect.NewClient[v1.ListRequest, v1.ListResponse](
			httpClient,
			baseURL+IntegrationProviderServiceListProcedure,
			opts...,
		),
		call: connect.NewClient[v1.CallRequest, v1.CallResponse](
			httpClient,
			baseURL+IntegrationProviderServiceCallProcedure,
			opts...,
		),
	}
}

// integrationProviderServiceClient implements IntegrationProviderServiceClient.
type integrationProviderServiceClient struct {
	get  *connect.Client[v1.GetRequest, v1.GetResponse]
	list *connect.Client[v1.ListRequest, v1.ListResponse]
	call *connect.Client[v1.CallRequest, v1.CallResponse]
}

// Get calls autokitteh.integration_provider.v1.IntegrationProviderService.Get.
func (c *integrationProviderServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// List calls autokitteh.integration_provider.v1.IntegrationProviderService.List.
func (c *integrationProviderServiceClient) List(ctx context.Context, req *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// Call calls autokitteh.integration_provider.v1.IntegrationProviderService.Call.
func (c *integrationProviderServiceClient) Call(ctx context.Context, req *connect.Request[v1.CallRequest]) (*connect.Response[v1.CallResponse], error) {
	return c.call.CallUnary(ctx, req)
}

// IntegrationProviderServiceHandler is an implementation of the
// autokitteh.integration_provider.v1.IntegrationProviderService service.
type IntegrationProviderServiceHandler interface {
	// Static declaration(s) of functions and values exposed to autokitteh.
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error)
	// Relay an API method call from the autokitteh runtime engine,
	// via the autokitteh connection manager, to the integration
	// provider, and then relay back the API's response.
	Call(context.Context, *connect.Request[v1.CallRequest]) (*connect.Response[v1.CallResponse], error)
}

// NewIntegrationProviderServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntegrationProviderServiceHandler(svc IntegrationProviderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	integrationProviderServiceGetHandler := connect.NewUnaryHandler(
		IntegrationProviderServiceGetProcedure,
		svc.Get,
		opts...,
	)
	integrationProviderServiceListHandler := connect.NewUnaryHandler(
		IntegrationProviderServiceListProcedure,
		svc.List,
		opts...,
	)
	integrationProviderServiceCallHandler := connect.NewUnaryHandler(
		IntegrationProviderServiceCallProcedure,
		svc.Call,
		opts...,
	)
	return "/autokitteh.integration_provider.v1.IntegrationProviderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntegrationProviderServiceGetProcedure:
			integrationProviderServiceGetHandler.ServeHTTP(w, r)
		case IntegrationProviderServiceListProcedure:
			integrationProviderServiceListHandler.ServeHTTP(w, r)
		case IntegrationProviderServiceCallProcedure:
			integrationProviderServiceCallHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntegrationProviderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntegrationProviderServiceHandler struct{}

func (UnimplementedIntegrationProviderServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.integration_provider.v1.IntegrationProviderService.Get is not implemented"))
}

func (UnimplementedIntegrationProviderServiceHandler) List(context.Context, *connect.Request[v1.ListRequest]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.integration_provider.v1.IntegrationProviderService.List is not implemented"))
}

func (UnimplementedIntegrationProviderServiceHandler) Call(context.Context, *connect.Request[v1.CallRequest]) (*connect.Response[v1.CallResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("autokitteh.integration_provider.v1.IntegrationProviderService.Call is not implemented"))
}
