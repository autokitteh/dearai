// @generated by protoc-gen-es v1.5.1 with parameter "target=ts"
// @generated from file autokitteh/integration_provider/v1/integration.proto (package autokitteh.integration_provider.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Value } from "../../values/v1/values_pb.js";

/**
 * TODO(ENG-112): This part of the API is still being designed.
 *
 * @generated from message autokitteh.integration_provider.v1.Integration
 */
export class Integration extends Message<Integration> {
  /**
   * @generated from field: map<string, autokitteh.values.v1.Value> values = 1;
   */
  values: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<Integration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "autokitteh.integration_provider.v1.Integration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Integration {
    return new Integration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Integration {
    return new Integration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Integration {
    return new Integration().fromJsonString(jsonString, options);
  }

  static equals(a: Integration | PlainMessage<Integration> | undefined, b: Integration | PlainMessage<Integration> | undefined): boolean {
    return proto3.util.equals(Integration, a, b);
  }
}

