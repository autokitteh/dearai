# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from autokitteh_pb.integration_provider.v1 import svc_pb2 as autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2


class IntegrationProviderServiceStub(object):
    """Implemented by integration providers, to respond to autokitteh.
    This service may be in charge of more than one integration, in which
    case it's responsible for managing integration IDs and connection mappings.
    In addition, autokitteh also implements this service - but as a router
    for all registered integrations, instead of an actual integration.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/autokitteh.integration_provider.v1.IntegrationProviderService/Get',
                request_serializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.GetRequest.SerializeToString,
                response_deserializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.GetResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/autokitteh.integration_provider.v1.IntegrationProviderService/List',
                request_serializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.ListRequest.SerializeToString,
                response_deserializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.ListResponse.FromString,
                )
        self.Call = channel.unary_unary(
                '/autokitteh.integration_provider.v1.IntegrationProviderService/Call',
                request_serializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.CallRequest.SerializeToString,
                response_deserializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.CallResponse.FromString,
                )


class IntegrationProviderServiceServicer(object):
    """Implemented by integration providers, to respond to autokitteh.
    This service may be in charge of more than one integration, in which
    case it's responsible for managing integration IDs and connection mappings.
    In addition, autokitteh also implements this service - but as a router
    for all registered integrations, instead of an actual integration.
    """

    def Get(self, request, context):
        """Static declaration(s) of functions and values exposed to autokitteh.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Call(self, request, context):
        """Relay an API method call from the autokitteh runtime engine,
        via the autokitteh connection manager, to the integration
        provider, and then relay back the API's response.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IntegrationProviderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.GetRequest.FromString,
                    response_serializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.GetResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.ListRequest.FromString,
                    response_serializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.ListResponse.SerializeToString,
            ),
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.CallRequest.FromString,
                    response_serializer=autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.CallResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'autokitteh.integration_provider.v1.IntegrationProviderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IntegrationProviderService(object):
    """Implemented by integration providers, to respond to autokitteh.
    This service may be in charge of more than one integration, in which
    case it's responsible for managing integration IDs and connection mappings.
    In addition, autokitteh also implements this service - but as a router
    for all registered integrations, instead of an actual integration.
    """

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.integration_provider.v1.IntegrationProviderService/Get',
            autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.GetRequest.SerializeToString,
            autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.GetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.integration_provider.v1.IntegrationProviderService/List',
            autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.ListRequest.SerializeToString,
            autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/autokitteh.integration_provider.v1.IntegrationProviderService/Call',
            autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.CallRequest.SerializeToString,
            autokitteh_dot_integration__provider_dot_v1_dot_svc__pb2.CallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
